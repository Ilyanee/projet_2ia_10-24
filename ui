package calculatrice;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import javafx.geometry.Insets;
import javafx.scene.text.Font;
import java.util.Stack;

public class ui extends Application {
	private Calculator calculatrice;
    private TextField accumulateurField;
    private TextArea pileField;
    
    public void start(Stage primaryStage) {
        calculatrice = new Calculator();
        
        primaryStage.setTitle("Calculatrice"); //Fenêtre principale
        
        //Affichage accumulateur
        
        accumulateurField = new TextField();
        accumulateurField.setEditable(false);
        
        //Affichage pile
        
        pileField = new TextArea();
        pileField.setEditable(false);
        pileField.setPrefRowCount(3);
		
		//Affichage écran
		
        VBox displayPanel = new VBox(10, new Label("Accumulateur:"), accumulateurField, 
        new Label("Pile:"), pileField);
        displayPanel.setPadding(new Insets(12));
        
        //Affichage boutons
        
        GridPane buttonPanel = new GridPane();
        buttonPanel.setHgap(10);
        buttonPanel.setVgap(10);
        buttonPanel.setPadding(new Insets(8));
        
        String[] buttonLabels = {"Empiler", "+", "-", "*", "/", "Effacer", "Dépiler"};
        int row = 0, col = 0;
        for (String label : buttonLabels) {
            Button button = new Button(label);
            button.setOnAction(e -> handleButtonAction(label));
            button.setMinWidth(80);
            buttonPanel.add(button, col++, row);
            if (col > 3) { // Passer à la ligne suivante après 4 boutons
                col = 0;
                row++;
            }
        }
        
     // Scène principale
        BorderPane root = new BorderPane();
        root.setTop(displayPanel);
        root.setCenter(buttonPanel);
        
        Scene scene = new Scene(root, 400, 300);
        primaryStage.setScene(scene);
        primaryStage.show();
}
    
    private void handleButtonAction(String command) {
        try {
            switch (command) {
                case "Push":
                    TextInputDialog dialog = new TextInputDialog();
                    dialog.setTitle("Entrée utilisateur");
                    dialog.setHeaderText("Entrez une valeur à empiler :");
                    dialog.setContentText("Valeur :");
                    dialog.showAndWait().ifPresent(input -> {
                        try {
                            double value = Double.parseDouble(input);
                            calculatrice.push(value);
                        } catch (NumberFormatException e) {
                            showAlert("Erreur", "Veuillez entrer un nombre valide.");
                        }
                    });
                    break;
                case "Add":
                    calculatrice.add();
                    break;
                case "Subtract":
                    calculatrice.subtract();
                    break;
                case "Multiply":
                    calculatrice.multiply();
                    break;
                case "Divide":
                    calculatrice.divide();
                    break;
                case "Clear":
                    calculatrice.clear();
                    break;
                case "Pop":
                    calculatrice.pop();
                    break;
            }
        } catch (Exception ex) {
            showAlert("Erreur", ex.getMessage());
        }
        updateDisplay();
    }

    private void updateDisplay() {
        accumulateurField.setText(String.valueOf(calculatrice.getAccumulateur()));
        Stack<Double> pile = calculatrice.getPile();
        StringBuilder pileText = new StringBuilder();
        int count = 0;
        for (int i = pile.size() - 1; i >= 0 && count < 3; i--, count++) {
            pileText.append(pile.get(i)).append("\n");
        }
        pileField.setText(pileText.toString());
    }

    private void showAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setContentText(content);
        alert.showAndWait();
    }

    public static void main(String[] args) {
        launch(args);
    }
}